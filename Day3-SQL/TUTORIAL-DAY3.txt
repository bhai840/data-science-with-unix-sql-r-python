## SQLITE AND THE SQLITE3 COMMAND LINE UTILITY ##


OPEN A TERMINAL WINDOW


## CHANGE INTO THE databases/sqlite FOLDER ##
cd databases/sqlite


## CREATE A NEW IN-MEMORY DATABASE ##
sqlite3


## CREATE A DATABASE TABLE ##
CREATE TABLE game_outcomes (game_date TEXT, home_team TEXT, away_team TEXT, home_score INTEGER, away_score INTEGER);


## SHOW CURRENT SETTINGS ##
.show


## LIST DATABASES ##
.databases


## LIST TABLES ##
.tables


## SHOW TABLE SCHEMA ##
.schema game_outcomes


## INSERT SOME DATA ##
INSERT INTO game_outcomes VALUES ('2015-04-15', 'GSW', 'DEN', 133, 126);
INSERT INTO game_outcomes VALUES ('2015-04-13', 'GSW', 'MEM', 111, 107);
INSERT INTO game_outcomes VALUES ('2015-04-11', 'GSW', 'MIN', 110, 101);
INSERT INTO game_outcomes VALUES ('2015-04-09', 'GSW', 'POR', 116, 105);


## VIEW THE DATA ##
SELECT * FROM game_outcomes;


## CHANGE THE COLUMN SEPARATOR ##
.separator ' '


## VIEW THE DATA ##
SELECT * FROM game_outcomes;




## WRITE QUERY RESULTS TO FILE ##
.header off
.mode csv
.once game_outcomes.csv                   OR    .output game_outcomes.csv  THEN  .output
SELECT * FROM game_outcomes;

WINDOWS: .system game_outcomes.csv
MAC: .system open game_outcomes.csv




## WRITE DATA AS INSERT STATEMENTS TO FILE ##
.mode insert gsw_table
.once gsw_insert_statements.txt
SELECT * FROM game_outcomes;

WINDOWS: .system gsw_insert_statements.txt
MAC: .system open gsw_insert_statements.txt




## EXIT SQLITE, DELETING THE IN-MEMORY DB ##
.exit
Control-D

cat game_outcomes.csv
cat gsw_insert_statements.txt




## CREATE A NEW DATABASE FILE ##
sqlite3 DataScience.db                   OR    sqlite3  THEN  .open DataScience.db
## CREATE A NEW DATABASE FILE ##
## LOAD WITH INSERT STATEMENTS ##
sqlite3

WINDOWS: .open "C:/Data Science/DataScience.db"
MAC: .open /Users/clinton/Documents/DataScience/Day3-SQL/DataScience.db

CREATE TABLE gsw_table (game_date TEXT, home_team TEXT, away_team TEXT, home_score INTEGER, away_score INTEGER);

.read gsw_insert_statements.txt

SELECT * FROM gsw_table;




## CREATE A NEW DATABASE FILE ##
sqlite3 DataScience.db                   OR    sqlite3  THEN  .open DataScience.db

WINDOWS: .open "C:/Data Science/DataScience.db"
MAC: .open /Users/clinton/Documents/DataScience/Day3-SQL/DataScience.db


## CREATE TABLE ##
CREATE TABLE iris (observation INTEGER, sepal_length REAL, sepal_width REAL, petal_length REAL, petal_width REAL, species TEXT);




## IMPORT DATA FROM CSV FILE ##
.mode csv 

WINDOWS: .import "C:/Data Science/input_files/iris.csv" iris
MAC: .import /Users/clinton/Documents/DataScience/Day3-SQL/input_files/iris.csv iris

.separator '  '

SELECT species, sepal_length, sepal_width, petal_length, petal_width FROM iris;




## REMIND OURSELVES WHAT WE HAVE ##
.databases
.tables

.exit




## CONVERT ENTIRE DATABASE TO AN ASCII TEXT FILE ##
echo '.dump' | sqlite3 /Users/clinton/Documents/DataScience/Day3-SQL/DataScience.db | gzip -c >/Users/clinton/Documents/DataScience/Day3-SQL/DataScience.db.gz




## RECONSTRUCT THE DATABASE FROM THE TEXT FILE ##
gunzip -c /Users/clinton/Documents/DataScience/Day3-SQL/DataScience.db.gz | sqlite3 /Users/clinton/Documents/DataScience/Day3-SQL/DataScienceReconstructed.db

sqlite3

.open /Users/clinton/Documents/DataScience/Day3-SQL/DataScienceReconstructed.db

.tables
.schema iris

SELECT * FROM iris LIMIT 5;




## INDEXING ##
CREATE INDEX obs_index ON iris (observation);

.schema iris




## RETRIEVING RECORDS ##
SELECT * FROM iris LIMIT 5;

SELECT * FROM gsw_table LIMIT 5;

.separator '  '

SELECT species, sepal_length FROM iris LIMIT 5;

SELECT game_date, away_team FROM gsw_table;



## NUMBERS ##
SELECT avg(sepal_length) FROM iris;

SELECT species, avg(petal_width) FROM iris GROUP BY species ORDER BY species;

SELECT count(home_score) FROM gsw_table;

SELECT game_date, count(*) FROM gsw_table GROUP BY game_date ORDER BY game_date;


SELECT species, min(sepal_width), max(sepal_width), min(sepal_length), max(sepal_length)
FROM iris
GROUP BY species
ORDER BY species;


SELECT sum(home_score), sum(away_score) FROM gsw_table;

SELECT game_date, total(home_score + away_score) FROM gsw_table GROUP BY game_date ORDER BY game_date DESC;


SELECT coalesce(NULL, species) FROM iris GROUP BY species;
SELECT coalesce(avg(petal_length), species) FROM iris GROUP BY species;


SELECT species, length(species) FROM iris GROUP BY species;


SELECT round(sepal_length / petal_width), 
round(petal_length / sepal_width, 1), 
round(petal_length / sepal_width, 2), 
round(sepal_length / petal_width, 3) 
FROM iris;

SELECT round(round(home_score,2) / away_score, 2), 
round(round(away_score, 2) / home_score, 3)
FROM gsw_table;

SELECT round(CAST(home_score AS FLOAT) / away_score, 2), 
round(CAST(away_score AS FLOAT) / home_score, 3)
FROM gsw_table;




## STRINGS ##
SELECT game_date, away_team, away_score FROM gsw_table WHERE like('MEM', away_team);


SELECT group_concat(DISTINCT species) FROM iris;

SELECT species, group_concat(sepal_width, '  ') FROM iris GROUP BY species;


SELECT home_team, lower(home_team), away_team, lower(away_team) FROM gsw_table;

SELECT upper(species) FROM iris;


SELECT ltrim(species, 'versi') FROM iris WHERE species = 'versicolor';
SELECT rtrim(species, 'color') FROM iris WHERE species = 'versicolor';
SELECT trim(species, 'vr') FROM iris WHERE species = 'versicolor';


SELECT replace(home_team, 'GSW', 'Golden State Warriors'), away_team, home_score, away_score FROM gsw_table;

SELECT replace(species, 'ic', 'i_c'), petal_width FROM iris WHERE species = 'versicolor';


SELECT substr(species, 6, 5) FROM iris WHERE species = 'versicolor';
SELECT substr(species, 1, 6) FROM iris WHERE species = 'virginica';
SELECT substr(species, 3) FROM iris WHERE species = 'setosa';
SELECT substr(species, -3, -3) FROM iris WHERE species = 'setosa';



## DATES ##
SELECT datetime(game_date) FROM gsw_table;

SELECT date(game_date) FROM gsw_table;

SELECT strftime('%m/%d/%Y', game_date) FROM gsw_table;

SELECT (strftime('%s', max(game_date)) - strftime('%s', min(game_date))) / 60 / 60 / 24 FROM gsw_table;

SELECT * FROM gsw_table WHERE date(game_date) BETWEEN '2015-04-10' AND '2015-04-12';



SELECT typeof(home_team), typeof(home_score), typeof(round(away_score, 2) / home_score) FROM gsw_table;



## CREATE MULTIPLE TABLES ##
CREATE TABLE versicolor (observation INTEGER, sepal_length REAL, sepal_width REAL, petal_length REAL, petal_width REAL, species TEXT);

CREATE TABLE setosa (observation INTEGER, sepal_length REAL, sepal_width REAL, petal_length REAL, petal_width REAL, species TEXT);

.mode insert versicolor
.once versicolor_insert_statements.txt
SELECT * FROM iris WHERE species = 'versicolor';

.mode insert setosa
.once setosa_insert_statements.txt
SELECT * FROM iris WHERE species = 'setosa';

.exit

perl -i -pe 's/\d{1,3}/$./' setosa_insert_statements.txt
perl -i -pe 's/\d{1,3}/$./' versicolor_insert_statements.txt

sqlite3
.open /Users/clinton/Documents/DataScience/Day3-SQL/DataScienceReconstructed.db

.read versicolor_insert_statements.txt
.read setosa_insert_statements.txt

SELECT * FROM versicolor LIMIT 5;
SELECT * FROM setosa LIMIT 5;




## WORK WITH MULTIPLE TABLES ##
SELECT s.observation, s.species, v.observation, v.species
FROM setosa AS s JOIN versicolor AS v ON s.observation = v.observation;


SELECT *
FROM setosa
WHERE observation NOT IN
(SELECT observation
FROM versicolor
WHERE observation > 5);


SELECT s.observation, s.species, s.sepal_length, s.petal_length,
v.observation, v.species, v.sepal_length, v.petal_length
FROM setosa AS s 
JOIN versicolor AS v 
ON s.observation = v.observation
WHERE s.sepal_length > 5.0;




## SORTING RECORDS ##
SELECT *
FROM setosa 
WHERE sepal_length > 5.5 
ORDER BY sepal_length DESC;

SELECT * 
FROM versicolor 
WHERE sepal_length > 6.0
ORDER BY sepal_length DESC, sepal_width ASC;




## CASE STATEMENTS ##
SELECT s.observation, s.species, s.sepal_length,
CASE WHEN s.sepal_length > 5.0 THEN 'Large'
     WHEN s.sepal_length > 4.0 THEN 'Medium'
     ELSE 'Small'
END AS sepal_size
FROM setosa AS s 
JOIN versicolor AS v 
ON s.observation = v.observation;




## NULL VALUES ##
SELECT * FROM setosa WHERE petal_length ISNULL;

SELECT * FROM setosa WHERE petal_length NOTNULL;

SELECT s.*, temp.observation
FROM setosa AS s
LEFT JOIN 
(SELECT observation
FROM versicolor
WHERE observation > 25) AS temp
ON s.observation = temp.observation;

SELECT setosa.*
FROM
(SELECT s.*, v.observation AS v_observation
FROM setosa AS s
LEFT JOIN 
(SELECT observation
FROM versicolor
WHERE observation > 25) AS v
ON s.observation = v.observation) AS setosa
WHERE v_observation ISNULL;




## UNION VS. UNION ALL ##
SELECT observation FROM setosa
UNION ALL
SELECT observation FROM versicolor;

SELECT observation FROM setosa
UNION
SELECT observation FROM versicolor;
